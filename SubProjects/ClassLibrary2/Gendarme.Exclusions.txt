#
# This file is used by Gendarme to maintain exclusion items that
# are applied to this project.
#
# Project-level suppressions either have no target or are given
# a specific target and scoped to a namespace, type, member, etc.
#
#
# Alternatively, certain rules will recognise the matching FxCop suppression
# Suppressions can also be made in source where appropriate.
#
# Notes:
#   R = rule name
#   A = Applies to given assembly
#   T = Applies to specified type
#   M = Applies to fully qualified method.
#   # = Comment line
#
# begin extra entries generated from defects
# added on 08/01/2024 19:48:29 by DESKTOP-1O03T0G/rache

R: Gendarme.Rules.Correctness.CheckParametersNullityInVisibleMethodsRule
M: System.Boolean SharpMoku.Board::IsThere5inRow(SharpMoku.Position)
M: System.Boolean SharpMoku.Board::IsValidPosition(SharpMoku.Position)
M: System.Collections.Generic.List`1<SharpMoku.Position> SharpMoku.Board::GetListNeighborPosition(SharpMoku.Position,System.Int32)
M: System.Void SharpMoku.Board::.ctor(SharpMoku.Board)
M: System.Void SharpMoku.Board::PutStone(SharpMoku.Position,SharpMoku.Board/CellValue)
M: System.Void SharpMoku.Board::PutStone(SharpMoku.Position)
M: System.Void SharpMoku.Board::PutStoneAndSwitchTurn(SharpMoku.Position,SharpMoku.Board/CellValue)
M: System.Void SharpMoku.Board::PutStoneAndSwitchTurn(SharpMoku.Position)
M: System.Void SharpMoku.Board::RemoveStone(SharpMoku.Position)

R: Gendarme.Rules.Correctness.MethodCanBeMadeStaticRule
M: System.Boolean SharpMoku.Board::IsThereAnyOneWon()
M: System.Boolean SharpMoku.Board::IsValidValue(System.Int32)

R: Gendarme.Rules.Design.AvoidVisibleFieldsRule
T: SharpMoku.Board
T: SharpMoku.Position

R: Gendarme.Rules.Design.AvoidVisibleNestedTypesRule
T: SharpMoku.Board/CellClickHandler
T: SharpMoku.Board/CellValue
T: SharpMoku.Board/PositionEventArgs
T: SharpMoku.Board/Turn
T: SharpMoku.Board/WinStatus

R: Gendarme.Rules.Design.ConsiderConvertingMethodToPropertyRule
M: System.Boolean SharpMoku.Board::IsThereAnyOneWon()

R: Gendarme.Rules.Design.EnumsShouldDefineAZeroValueRule
T: SharpMoku.Board/Turn

R: Gendarme.Rules.Design.Generic.AvoidDeclaringCustomDelegatesRule
T: SharpMoku.Board/CellClickHandler

R: Gendarme.Rules.Design.Generic.DoNotExposeGenericListsRule
T: SharpMoku.Board

R: Gendarme.Rules.Design.Generic.UseGenericEventHandlerRule
T: SharpMoku.Board/CellClickHandler

R: Gendarme.Rules.Design.ImplementEqualsAndGetHashCodeInPairRule
T: SharpMoku.Position

R: Gendarme.Rules.Exceptions.AvoidThrowingBasicExceptionsRule
M: System.Boolean SharpMoku.Board::IsThereAnyOneWon()
M: System.Void SharpMoku.Board::RemoveStone(SharpMoku.Position)

R: Gendarme.Rules.Naming.AvoidRedundancyInMethodNameRule
M: System.Boolean SharpMoku.Board::IsValidPosition(SharpMoku.Position)
M: System.Collections.Generic.Dictionary`2<System.String,SharpMoku.Position> SharpMoku.Board::GetHshByCellValue(SharpMoku.Board/CellValue)
M: System.Collections.Generic.List`1<SharpMoku.Position> SharpMoku.Board::GetListNeighborPosition(SharpMoku.Position,System.Int32)
M: System.Collections.Generic.List`1<SharpMoku.Position> SharpMoku.Board::GetListNeighborPosition(SharpMoku.Position)

R: Gendarme.Rules.Naming.UseCorrectCasingRule
M: System.Collections.Generic.List`1<SharpMoku.Position> SharpMoku.Board::generateNeighbourMoves()
M: System.Collections.Generic.List`1<SharpMoku.Position> SharpMoku.Board::generateNeighbourMoves(System.Int32)
M: System.Void SharpMoku.Board::PutStone(System.Int32,System.Int32,System.Int32)
P: System.Collections.Generic.Dictionary`2<System.String,SharpMoku.Position> SharpMoku.Board::dicBlackStone()
P: System.Collections.Generic.Dictionary`2<System.String,SharpMoku.Position> SharpMoku.Board::dicNeighbour()
P: System.Collections.Generic.Dictionary`2<System.String,SharpMoku.Position> SharpMoku.Board::dicWhiteStone()

R: Gendarme.Rules.Smells.AvoidLongMethodsRule
M: System.Collections.Generic.List`1<SharpMoku.Position> SharpMoku.Board::generateNeighbourMoves(System.Int32)
M: System.Void SharpMoku.Board::AdjustEmptyNeighborOf(SharpMoku.Position)

# end extra entries generated from defects

# begin extra entries generated from defects
# added on 08/01/2024 21:37:16 by DESKTOP-1O03T0G/rache

R: Gendarme.Rules.Correctness.CheckParametersNullityInVisibleMethodsRule
M: System.Void SharpMoku.Board::PutStone(SharpMoku.Position,SharpMoku.CellValue)
M: System.Void SharpMoku.Board::PutStoneAndSwitchTurn(SharpMoku.Position,SharpMoku.CellValue)

R: Gendarme.Rules.Design.EnumsShouldDefineAZeroValueRule
T: SharpMoku.Turn

R: Gendarme.Rules.Naming.AvoidRedundancyInMethodNameRule
M: System.Collections.Generic.Dictionary`2<System.String,SharpMoku.Position> SharpMoku.Board::GetHshByCellValue(SharpMoku.CellValue)

# end extra entries generated from defects

# begin extra entries generated from defects
# added on 08/01/2024 21:44:43 by DESKTOP-1O03T0G/rache

R: Gendarme.Rules.Correctness.CheckParametersNullityInVisibleMethodsRule
M: System.Boolean SharpMoku.Board::IsThere5InRow(SharpMoku.Position)

# end extra entries generated from defects

# begin extra entries generated from defects
# added on 08/01/2024 22:17:36 by DESKTOP-1O03T0G/rache

R: Gendarme.Rules.Serialization.MarkAllNonSerializableFieldsRule
T: SharpMoku.Board
T: SharpMoku.Position

R: Gendarme.Rules.Smells.AvoidCodeDuplicatedInSameClassRule
T: SharpMoku.Board

# end extra entries generated from defects

