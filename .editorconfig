# EditorConfig helps developers define and maintain consistent
# coding styles between different editors and IDEs
# http://editorconfig.org

root = true

# https://github.com/pharring/EditorGuidelines#getting-started
[*]
guidelines = 80
guidelines_style = 1px dotted magenta

[*.{cs,vb}]
guidelines = 80 1px dotted deeppink, 120 1px dashed maroon, 132 2px solid red

# Treat all _ prefixed files as generated code
[_*.{cs,vb}]
generated_code = false

[*]
; prefer tabs for indentation.
indent_style             = tab
tab_width                = 4
; (Please don't specify an indent_size here; that has too many unintended consequences.)
charset                  = utf-8
trim_trailing_whitespace = true
end_of_line              = crlf
insert_final_newline     = true
max_line_length          = 132

# Code files
[*.{cs,csx,vb,vbx}]
indent_size = 4
tab_width = 4
charset = utf-8

# Xml project files
[*.{csproj,vbproj,vcxproj,vcxproj.filters,proj,projitems,shproj}]
indent_size = 2
tab_width = 2

# Xml config files
[*.{props,targets,ruleset,config,nuspec,resx,vsixmanifest,vsct}]
indent_size = 2
tab_width = 2

# JSON files
[*.json]
indent_size = 2
tab_width = 2

; PowerShell scripts
[*.{ps1}]
indent_size = 4

[*.{sh}]
indent_size = 4

; Dotnet code style settings
[*.{cs,vb}]
; Sort using and Import directives with System.* appearing first
dotnet_sort_system_directives_first                        = true

; IDE0003 Avoid "this." and "Me." if not necessary
dotnet_style_qualification_for_field                       = false : warning
dotnet_style_qualification_for_property                    = false : warning
dotnet_style_qualification_for_method                      = false : warning
dotnet_style_qualification_for_event                       = false : warning

; IDE0012 Use language keywords instead of framework type names for type references
dotnet_style_predefined_type_for_locals_parameters_members = true : warning
; IDE0013 use type for member access (statis members etc...)
dotnet_style_predefined_type_for_member_access             = false : warning

; Suggest more modern language features when available
dotnet_style_object_initializer = true:suggestion
dotnet_style_collection_initializer                        = true : warning
dotnet_style_explicit_tuple_names                          = true : warning
dotnet_style_coalesce_expression                           = true : warning
dotnet_style_null_propagation                              = true : warning

; CSharp code style settings
[*.cs]
dotnet_separate_import_directive_groups = true
# IDE0063: Use simple 'using' statement
csharp_prefer_simple_using_statement = false:warning
dotnet_diagnostic.IDE0063.severity = warning

; IDE0161 enforce block_scoped namespaces
csharp_style_namespace_declarations = block_scoped:error
dotnet_diagnostic.IDE0161.severity = error

; IDE0007 Avoid "var" everywhere
csharp_style_var_for_built_in_types                                          = false : error
csharp_style_var_when_type_is_apparent                                       = false : error
csharp_style_var_elsewhere                                                   = false : error

; Prefer method-like constructs to have a block body
csharp_style_expression_bodied_methods                                       = false : none
csharp_style_expression_bodied_constructors                                  = false : none
csharp_style_expression_bodied_operators                                     = false : none

; Prefer property-like constructs to have an expression-body
csharp_style_expression_bodied_properties                                    = true : suggestion
csharp_style_expression_bodied_indexers                                      = true : suggestion
csharp_style_expression_bodied_accessors                                     = true : suggestion

; Suggest more modern language features when available
csharp_style_pattern_matching_over_is_with_cast_check                        = true : none
csharp_style_pattern_matching_over_as_with_null_check                        = true : none
csharp_style_inlined_variable_declaration                                    = true : none
csharp_style_throw_expression                                                = true : none
csharp_style_conditional_delegate_call                                       = true : suggestion

; Newline settings
csharp_new_line_before_open_brace                                            = types,methods,control_blocks
csharp_new_line_before_else                                                  = true
csharp_new_line_before_catch                                                 = true
csharp_new_line_before_finally                                               = true
csharp_new_line_before_members_in_object_initializers                        = true
csharp_new_line_before_members_in_anonymous_types                            = true

;blank lines
csharp_blank_lines_after_using_list                                          = 1
csharp_blank_lines_around_namespace                                          = 0
csharp_blank_lines_inside_namespace                                          = 0
csharp_blank_lines_around_type                                               = 0
csharp_blank_lines_inside_type                                               = 0
csharp_blank_lines_around_field                                              = 0
csharp_blank_lines_around_single_line_field                                  = 0
csharp_blank_lines_around_property                                           = 0
csharp_blank_lines_around_single_line_prop                                   = 0
csharp_remove_blank_lines_near_braces_in_code                                = true
resharper_csharp_remove_blank_lines_near_braces_in_code                      = true
csharp_blank_lines_after_block_statements                                    = 0
csharp_keep_blank_lines_in_code												 = 0

csharp_align_multiline_parameter = true : none

# IDE0059: Unnecessary assignment of a value
csharp_style_unused_value_assignment_preference = discard_variable:warning
# IDE0063: Use simple 'using' statement
csharp_prefer_simple_using_statement = false:none


; Naming styles
dotnet_naming_style.PascalCase.capitalization                         = pascal_case
dotnet_naming_style.camelCase.capitalization                          = camel_case

; Naming rule: async methods end in Async
dotnet_naming_style.async_method_style.capitalization                        = pascal_case
;dotnet_naming_style.async_method_style.required_suffix                      = Async
dotnet_naming_symbols.async_method_symbols.applicable_kinds                  = method
dotnet_naming_symbols.async_method_symbols.required_modifiers                = async
dotnet_naming_rule.async_methods_rule.severity                               = suggestion
dotnet_naming_rule.async_methods_rule.symbols                                = async_method_symbols
dotnet_naming_rule.async_methods_rule.style                                  = async_method_style

; Naming rule: Interfaces must be pascal-cased prefixed with I
dotnet_naming_style.interface_style.capitalization                           = pascal_case
dotnet_naming_style.interface_style.required_prefix                          = I
dotnet_naming_symbols.interface_symbols.applicable_kinds                     = interface
dotnet_naming_symbols.interface_symbols.applicable_accessibilities           = *
dotnet_naming_rule.interfaces_rule.severity                                  = warning
dotnet_naming_rule.interfaces_rule.symbols                                   = interface_symbols
dotnet_naming_rule.interfaces_rule.style                                     = interface_style

; Naming rule: All methods and properties must be pascal-cased
dotnet_naming_symbols.method_and_property_symbols.applicable_kinds           = method,property,class,struct,enum,namespace
dotnet_naming_symbols.method_and_property_symbols.applicable_accessibilities = *
dotnet_naming_rule.methods_and_properties_rule.severity                      = warning
dotnet_naming_rule.methods_and_properties_rule.symbols                       = method_and_property_symbols
dotnet_naming_rule.methods_and_properties_rule.style                         = PascalCase

; Naming rule: Static fields must be pascal-cased
dotnet_naming_symbols.static_member_symbols.applicable_kinds                 = field
dotnet_naming_symbols.static_member_symbols.applicable_accessibilities       = *
dotnet_naming_symbols.static_member_symbols.required_modifiers               = static
dotnet_naming_symbols.const_member_symbols.applicable_kinds                  = field
dotnet_naming_symbols.const_member_symbols.applicable_accessibilities        = *
dotnet_naming_symbols.const_member_symbols.required_modifiers                = const
dotnet_naming_rule.static_fields_rule.severity                               = warning
dotnet_naming_rule.static_fields_rule.symbols                                = static_member_symbols
dotnet_naming_rule.static_fields_rule.style                                  = PascalCase

; Naming rule: Private members must be camel-cased and prefixed with underscore
dotnet_naming_style.private_member_style.capitalization                      = camel_case
dotnet_naming_style.private_member_style.required_prefix                     = _
dotnet_naming_symbols.private_field_symbols.applicable_kinds                 = field,event
dotnet_naming_symbols.private_field_symbols.applicable_accessibilities       = private,protected,internal
dotnet_naming_rule.private_field_rule.severity                               = warning
dotnet_naming_rule.private_field_rule.symbols                                = private_field_symbols
dotnet_naming_rule.private_field_rule.style                                  = private_member_style

; Naming rule: All events should be PascalCased
dotnet_naming_rule.events_should_be_pascal_case.symbols						 = events
dotnet_naming_symbols.events.applicable_kinds								 = event
dotnet_naming_symbols.events.applicable_accessibilities						 = *
dotnet_naming_rule.events_should_be_pascal_case.style						 = PascalCase
dotnet_naming_rule.events_should_be_pascal_case.severity					 = suggestion


[*.{cs,vb}]
; using can be simplified
dotnet_diagnostic.IDE0063.severity = none
; Dispose objects before losing scope
dotnet_diagnostic.IDE0067.severity = none
; Disposable fields should be disposed
dotnet_diagnostic.IDE0069.severity = suggestion
; Fix Formatting
dotnet_diagnostic.IDE0055.severity = suggestion
; Namimg Rules
dotnet_diagnostic.IDE1006.severity = none
# IDE0051: Remove unused private members
dotnet_diagnostic.IDE0051.severity = suggestion

[*.cs]
; ReSharper specific
xmldoc_keep_user_linebreaks = false
xmldoc_linebreaks_inside_tags_for_multiline_elements = true
xmldoc_linebreaks_inside_tags_f or_elements_with_child_elements = false
xmldoc_spaces_inside_tags =false
xmldoc_wrap_text = true
xmldoc_max_blank_lines_between_tags = 0
xmldoc_max_line_length = 100

[*.{cs,vb}]
# NET8.0 RC2 code analysis suppressions
# // Use concrete types when possible for improved performance
dotnet_diagnostic.CA1859.severity = none
dotnet_diagnostic.CA1001.severity = none
dotnet_diagnostic.CA1002.severity = none
dotnet_diagnostic.CA1003.severity = none
dotnet_diagnostic.CA1008.severity = none
dotnet_diagnostic.CA1034.severity = none
dotnet_diagnostic.CA1051.severity = none
dotnet_diagnostic.CA1052.severity = none
dotnet_diagnostic.CA1311.severity = none
dotnet_diagnostic.CA1805.severity = none
dotnet_diagnostic.CA1814.severity = none
dotnet_diagnostic.CA1815.severity = none
dotnet_diagnostic.CA1820.severity = none
dotnet_diagnostic.CA1824.severity = none
dotnet_diagnostic.CA1834.severity = none
dotnet_diagnostic.CA1852.severity = none
dotnet_diagnostic.CA1853.severity = none
dotnet_diagnostic.CA1854.severity = none
dotnet_diagnostic.CA2300.severity = none
dotnet_diagnostic.CA2301.severity = none
dotnet_diagnostic.CA5392.severity = none
dotnet_diagnostic.CA5394.severity = none
